{"version":3,"sources":["webpack:///./src/demos/G6Try/G6Demo/index.js"],"names":["_react","__webpack_require__","G6Demo","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","_getPrototypeOf2","default","call","node","createRef","graph","Component","console","log","history","location","G6","Graph","container","current","width","height","modes","drag","data","nodes","id","x","y","size","shape","label","color","labelCfg","position","style","fill","lineWidth","edges","source","target","autoRotate","stroke","render","on","ev","item","getType","_react2","createElement","Fragment","ref"],"mappings":"0aAAAA,EAAAC,EAAA,cACAA,EAAA,6DAEMC,cACF,SAAAA,EAAYC,gGAAOC,CAAAC,KAAAH,GAAA,IAAAI,mKAAAC,CAAAF,MAAAH,EAAAM,YAAA,EAAAC,EAAAC,SAAAR,IAAAS,KAAAN,KACTF,IADS,OAEfG,EAAKM,MAAO,EAAAZ,EAAAa,aACZP,EAAKQ,MAAQ,KAHER,iTADFS,4DAQbC,QAAQC,IAAI,gBAAiBZ,KAAKF,MAAMe,QAAQC,UA+DhDd,KAAKS,MAAQ,IAAIM,UAAGC,MAAM,CACtBC,UAAWjB,KAAKO,KAAKW,QACrBC,MAAO,IACPC,OAAQ,IACRC,MAAO,CACHhB,QAAS,CAAC,gBACViB,KAAM,CAAC,YAAa,kBAG5BtB,KAAKS,MAAMc,KAvEE,CAETC,MAAO,CAAC,CACJC,GAAI,IACJC,EAAG,IACHC,EAAG,IACHC,KAAM,GACNC,MAAO,SACPC,MAAO,OACPC,MAAO,UACPC,SAAU,CACNC,SAAU,SACVC,MAAO,CACHC,KAAM,SAGdD,MAAO,CACHE,UAAW,EACXD,KAAM,YAEX,CACCV,GAAI,IACJC,EAAG,IACHC,EAAG,IACHC,KAAM,GACNC,MAAO,SACPE,MAAO,UACPD,MAAO,OACPE,SAAU,CACNC,SAAU,SACVC,MAAO,CACHC,KAAM,SAGdD,MAAO,CACHE,UAAW,EACXD,KAAM,aAGdE,MAAO,CACH,CACIC,OAAQ,IACRC,OAAQ,IACRV,MAAO,QACPC,MAAO,QACPE,SAAU,CACNC,SAAU,SACVO,YAAY,EACZN,MAAO,CACHE,UAAW,EACXD,KAAM,UACNM,OAAQ,UAKhBV,MAAO,cAgBnB/B,KAAKS,MAAMiC,SACX1C,KAAKS,MAAMkC,GAAG,QAAS,SAAAC,GACLA,EAAGL,OAAjB,IACMM,EAAOD,EAAGC,KAEhB,GAAIA,EACaA,EAAKC,YAK1B9C,KAAKS,MAAMkC,GAAG,aAAc,SAAAC,GAEVA,EAAGL,OACJK,EAAGC,wCAMpB,OACIE,EAAA1C,QAAA2C,cAACrD,EAAAsD,SAAD,KACIF,EAAA1C,QAAA2C,cAAA,OAAKE,IAAKlD,KAAKO,2BAMhBV","file":"10.bundle.js","sourcesContent":["import React, { Component, Fragment, createRef } from 'react';\r\nimport G6 from '@antv/g6';\r\n\r\nclass G6Demo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.node = createRef();\r\n        this.graph = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('这里检测路由传过来的参数：', this.props.history.location);\r\n        const data = {\r\n            //定义容器中节点\r\n            nodes: [{\r\n                id: '1', //id不能为数字\r\n                x: 300,\r\n                y: 100,\r\n                size: 80,\r\n                shape: 'circle', //节点类型\r\n                label: '流程开始', //节点描述\r\n                color: '#387ee8', //边的颜色\r\n                labelCfg: { //节点描述位置的配置\r\n                    position: 'center',\r\n                    style: {\r\n                        fill: '#fff'\r\n                    }\r\n                },\r\n                style: { //节点样式\r\n                    lineWidth: 0, //边的宽度\r\n                    fill: '#1ec18a',\r\n                }\r\n            }, {\r\n                id: '2',\r\n                x: 300,\r\n                y: 500,\r\n                size: 80,\r\n                shape: 'circle',\r\n                color: '#387ee8',\r\n                label: '流程结束',\r\n                labelCfg: { //节点描述位置的配置\r\n                    position: 'center',\r\n                    style: {\r\n                        fill: '#fff'\r\n                    }\r\n                },\r\n                style: { //节点样式\r\n                    lineWidth: 0,\r\n                    fill: '#f46767'\r\n                }\r\n            },],\r\n            edges: [\r\n                {\r\n                    source: '1',\r\n                    target: '2',\r\n                    shape: 'cubic',\r\n                    label: 'cubic',\r\n                    labelCfg: {\r\n                        position: 'center', // 其实默认就是 center，这里写出来便于理解\r\n                        autoRotate: true, //根据曲线自动适应\r\n                        style: {\r\n                            lineWidth: 5, //线宽\r\n                            fill: '#722ed1', //文字颜色\r\n                            stroke: 'white' // 背景颜色\r\n                        },\r\n                        // refY: 50,\r\n                        // refX: 50\r\n                    },\r\n                    color: '#387ee8' //连线颜色\r\n                    //controlPoints: [{x: 100, y: 70}] //折线需要配置polyline(控制点)，quadratic, cubic一般内置控制点\r\n                }\r\n            ]\r\n        };\r\n        //实例化容器，宽、高\r\n        this.graph = new G6.Graph({\r\n            container: this.node.current,\r\n            width: 1000,\r\n            height: 800,\r\n            modes: { // 支持的 behavior\r\n                default: ['click-select'],\r\n                drag: ['drag-node', 'drag-canvas']\r\n            }\r\n        });\r\n        this.graph.data(data);\r\n        this.graph.render();\r\n        this.graph.on('click', ev => {\r\n            const shape = ev.target;\r\n            const item = ev.item;\r\n            //console.log(ev);\r\n            if (item) {\r\n                const type = item.getType();\r\n                //console.log(type);\r\n            }\r\n        });\r\n\r\n        this.graph.on('node:click', ev => {\r\n            //console.log(ev)\r\n            const shape = ev.target;\r\n            const node = ev.item;\r\n            //console.log(shape, node);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div ref={this.node} ></div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default G6Demo;"],"sourceRoot":""}